package com.rockwell.crudui.form.impl.form.factory;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Stream;

import com.rockwell.crudui.crud.CrudOperation;
import com.rockwell.crudui.form.AbstractAutoGeneratedCrudFormFactory;
import com.rockwell.crudui.form.AfterAutoCreateFormEvent;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.Component;
import com.vaadin.flow.component.ComponentEventListener;
import com.vaadin.flow.component.HasValueAndElement;
import com.vaadin.flow.component.button.Button;
import com.vaadin.flow.component.formlayout.FormLayout;
import com.vaadin.flow.component.orderedlayout.FlexComponent.Alignment;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;

public class DefaultCrudFormFactory<T> extends AbstractAutoGeneratedCrudFormFactory<T> {

    /**
	 * Comment for <code>serialVersionUID</code>
	 */
	private static final long serialVersionUID = -383399061079066282L;
	private FormLayout.ResponsiveStep[] responsiveSteps;
	protected FormLayout formLayout;
	protected Map<CrudOperation,AfterAutoCreateFormEvent<T>> afterAutoCreateFormEvents = new HashMap<>();

    public DefaultCrudFormFactory(Class<T> domainType) {
        this(domainType, (FormLayout.ResponsiveStep[]) null);
    }

    public DefaultCrudFormFactory(Class<T> domainType, FormLayout.ResponsiveStep... responsiveSteps) {
        super(domainType);
        if (responsiveSteps != null) {
            this.responsiveSteps = responsiveSteps;
        } else {
            this.responsiveSteps = new FormLayout.ResponsiveStep[]{
                    new FormLayout.ResponsiveStep("0em", 1),
                    new FormLayout.ResponsiveStep("25em", 2)
            };
        }
        afterAutoCreateFormEvents.put(CrudOperation.READ, (f,o)->{});
        afterAutoCreateFormEvents.put(CrudOperation.ADD,  (f,o)->{});
        afterAutoCreateFormEvents.put(CrudOperation.UPDATE,  (f,o)->{});
        afterAutoCreateFormEvents.put(CrudOperation.DELETE,  (f,o)->{});
    }
    
    public void setAfterAutoCreateFormEvents(CrudOperation operation, AfterAutoCreateFormEvent<T> event)
	{
		this.afterAutoCreateFormEvents.put(operation, event);
	}
    
    public void setAfterAutoCreateFormEvents(AfterAutoCreateFormEvent<T> event)
    {
    	Stream.of(CrudOperation.values()).forEach(item->setAfterAutoCreateFormEvents(item,event));
    }
    
    public FormLayout getFormLayout()
	{
		return formLayout;
	}
    
    public Optional<Component> getFormItem(String property)
    {
    	Stream<Component> stream = formLayout.getChildren();
    	if(stream != null)
    	{
    		return stream.filter(item->item.getElement().getAttribute("fieldname").equals(property)).findFirst();
    	}
    	
    	return Optional.empty();
    }
    
    @Override
    public Component buildNewForm(CrudOperation operation, T domainObject, boolean readOnly, ComponentEventListener<ClickEvent<Button>> cancelButtonClickListener, ComponentEventListener<ClickEvent<Button>> operationButtonClickListener) {
        formLayout = new FormLayout();
        formLayout.setSizeFull();
        formLayout.setResponsiveSteps(responsiveSteps);

        @SuppressWarnings("rawtypes")
		List<HasValueAndElement> fields = buildFields(operation, domainObject, readOnly);
        fields.stream()
                .forEach(field ->
                        formLayout.getElement().appendChild(field.getElement()));
        
        if(otherFieldswithValidor.get(operation) != null)
        {
        	otherFieldswithValidor.get(operation).forEach(field->formLayout.getElement().appendChild(field.getField().getElement()));
        }

        Component footerLayout = buildFooter(operation, domainObject, cancelButtonClickListener, operationButtonClickListener);

        com.vaadin.flow.component.orderedlayout.VerticalLayout mainLayout = new VerticalLayout(formLayout, footerLayout);
        mainLayout.setFlexGrow(1, formLayout);
        mainLayout.setHorizontalComponentAlignment(Alignment.END, footerLayout);
        mainLayout.setMargin(false);
        mainLayout.setPadding(false);
        mainLayout.setSpacing(true);

        //after form auto creation,do something here
        afterAutoCreateFormEvents.get(operation).perfom(formLayout,domainObject);;
        
        return mainLayout;
    }

}
